@ngdoc overview
@name Learning Yeoman: Index
@description

# ￼Learning Yeoman

* Preface
* Chapter 1: Modern Workflows for Modern WebApps
* Chapter 2: Get Started
* Chapter 3: My Angular Project
* Chapter 4: Routes, Views & Controllers
* Chapter 5: Factories & Services
* Chapter 6: Custom Generator’s
* Chapter 7: Custom Library’s 
* Chapter 8: Tasks with Grunt
* Chapter 9: Tips & Tricks
* Appendix: Resources



## Preface
￼￼This book provides you with the opportunity to discover all three core tools that the Yeoman workflow has to offer but also gives you an insight into its advanced features. 

The book will focus on what kind of applications can be built using Yeoman and what kind of frameworks that can be used easily with it. 

In order to demonstrate how it can speed up development time, we'll build a application from scratch, integrating with the AngularJS framework with as many functionalities as needed by any modern web application.
￼

Given that Yeoman can be  used with both JavaScript and CoffeeScript, you'll be introduced to the CoffeScript programming language. However, most of the examples are in JavaScript.



## Chapter 1: Modern Workflows for Modern WebApps
Estimated Page Count: 10
This chapter will discuss the three core tools that make up the Yeoman workflow, how to use these tools
in development and how to incorporate this workflow into new or existing projects. 
List of topics that will be covered in the chapter: 

* Overview of Tools
	* Yo is used to generate things, from other generators to files and more.
	* Bower is used for dependency management, downloading and installing components.
	* Grunt is used for task management such as building, previewing and testing.
* Summary
	* Discuss about the workflow tools and generators available and how we are going to implement to a
simple generic web app project. 


## Chapter 2: Get Started
Estimated Page Count: 15
This chapter will be about getting started with using Yeoman and the generators, including setting up
local development environment and any dependencies that are needed for using Yeoman and also discuss
how to use yo, bower and grunt. 

* Overview
	* Installing yeoman, bower and grunt
	* Installing generators - generator-angular, generator-backbone, generator-ember, generator-webapp
* Usage
	* Using yeoman, bower and grunt commands
	* Using generators - generator-webapp
* Summary
	* Discuss about the other generators available and how we are going to implement to top 3 most
popular. 

## Chapter 3: Routes, Views & Controllers

Estimated Page Count: 20

This chapter will cover Angular Routes, View and Controllers, the concepts behind each, methods and properties, as well as incorporation these into a application using the Yeoman angular-generator.



List of topics that will be covered in the chapter:

* Overview
    * Discuss the concepts behind AngularJS Routes, View and Controllers.
* Routes & Views
    * Overview on Angular Router and Views
    * Overview on Angular View  `{{ }}` binding expressions, `ng` directives.
    * Creating Angular Router and using route methods in application.
     Creating Angular View and using angular views in application.
*  Controllers
   * Overview on Angular Controllers
   * Creating Angular controllers using controllers in application
   * Testing controllers 
* Summary
    * Discuss a summary on what we have learned in this chapter and how to extend our knowledge.

 

## Chapter 4: Directives & Filters

Estimated Page Count: 20

This chapter will cover Angular Directives and Filters, the concepts behind each and how to incorporate custom directives and filters in a application using Yeoman.


List of topics that will be covered in the chapter:

*  Overview
   * Discuss the concepts behind AngularJS directives and filters.
* Directives
   *  Overview on Angular Directives methods and properties, and how we can implement this into the application.
   *  Creating Angular directives, testing directives and using directives in application
* Filters
   * Overview on Angular Filters properties, and how we can implement this into the application. 
   *  Creating Angular filters, testing filters and using filters in application
*  Summary
   * Discuss a summary on what we have learned in this chapter and how to extend our knowledge.



## Chapter 5: Factories, Services & Decorators

Estimated Page Count: 20

This chapter will cover creating Angular Factories, Services and Decorators, as well as cover the basic concepts behind each of these modules and how to implement them into a application using Yeoman.


List of topics that will be covered in the chapter:

*  Overview
   *  Discuss the concepts behind AngularJS Factories and Services and its purpose.
* Factories
   * Creating Angular factories, 
   * Testing factories 
   * using factories in application.
* Services
   * Creating Angular Services
   * Testing services 
   * Using in application
*  Summary
    *  Discuss a summary on what we have learned in this chapter and how to extend our knowledge.

## Chapter 6: Custom Generator’s

Estimated Page Count: 25


￼This chapter will cover creating custom generators with Yeoman, installing the `generator-generator` and how to create a reusable Yeoman Generator and how to make it available to the community.

List of topics that will be covered in the chapter:

*  Overview
   *  Discuss the concepts behind a Yeoman generator and how they work.
*  Yeoman `generator-generator`
   *  Overview on the generator generator API
   *  Common tasks using the generator
*  Custom Generator
   *  Overview on what type of generator we are going to create
   *  Creating the base for our generator
   *  Creating sub  generators for our generator
   *  Testing our generator and sub generators
   *  Deploying our custom generator to NPM
*  Summary
*  Discuss what we have learned in the chapter and where to get more information.



## Chapter 7: Custom Library’s

Estimated Page Count: 25

￼This chapter will cover creating custom JavaScript library's that are then deployed to Bower for community usage, and will cover creating a custom AngularJS component that is hosted on Bower.

List of topics that will be covered in the chapter:

*  Overview
   *  Installing angular library generator
   *  Installing angular component generator
*  Creating a Custom Library
   *  Using angular library generator
   *  Creating angular library
   *  Testing library
   *  Deploying library
*  Creating a Custom Angular Component
   *  Using angular component generator
   *  Creating a component
   *  Testing a component
   *  Deploying a component to bower
*  Summary
	* Discuss what we have learned in the chapter and where to get more information.



## Chapter 8: Tasks with Grunt

Estimated Page Count: 20
￼
￼This chapter will cover using Grunt in new or existing projects, we will also discuss usage on common Grunt core plugins as well as a few favorited plugins in the community and how to use Grunt to automate common tasks when developing small or large projects.

List of topics that will be covered in the chapter:

*  Overview
   *  Discuss how Grunt can be used to automate tasks in the development of projects. *  Grunt Tasks
   *  Deploying with Grunt
   *  Code Coverage with Grunt
   *  TBA
*  Summary
    *  Discuss what we have learned in the chapter and where to get more information.



##Chapter 9: Tips & Tricks

Estimated Page Count: 20

This chapter will cover some useful tips and tricks when using Yeoman and friends. Such as creating Angular directives that wrap jQuery plugins, 3rd party factory implementation and more.

List of topics that will be covered in the chapter:

* Overview
    * Discuss common problems in web development and solutions for these problems, using yeoman generators or grunt tasks to solve them.
* Tips & Tricks
    * jQuery plugins as Angular Directives
    * Socket.io Angular Service + Node.js Socket.io 
    * Parse API Angular Factory
    * TBA
* Summary
    * Discuss what we have learned in the chapter and where to get more information.



## Appendix: Resources

Estimated Page Count: 10

￼This chapter will include often    used commands when using Grunt, Bower, Yo and Jasmine, it will serve as a reference for developers when using these tools:

List of topics that will be covered in the chapter:

*  Overview
	*  Discuss the tools that are used in the Yeoman workflow and the APIs that each tool exposes. 
*  Reference Guides
	* Grunt Reference    
	* Bower Reference
	* Yeoman Reference
	* Jasmine Reference
*  Summary
	*  Discuss what we have learned in this chapter and where to go for more information. 




#Reference Guides
Since using the Yeoman workflow tools includes several different commands the following reference commands and their documentation is listed below.



### Bower
Bower is a package manager for the web. 

Usage:

    bower <command> [args] [options]

Commands:

    cache                   Manage bower cache
    help                    Display help information about Bower
    home                    Opens a package homepage into your favorite browser
    info                    Info of a particular package
    init                    Interactively create a bower.json file
    install                 Install a package locally
    link                    Symlink a package folder
    list                    List local packages
    lookup                  Look up a package URL by name
    prune                   Removes local extraneous packages
    register                Register a package
    search                  Search for a package by name
    update                  Update a local package
    uninstall               Remove a local package

Options:

    -f, --force             Makes various commands more forceful
    -j, --json              Output consumable JSON
    -l, --log-level         What level of logs to report
    -o, --offline           Do not hit the network
    -q, --quiet             Only output important information
    -s, --silent            Do not output anything, besides errors
    -V, --verbose           Makes output more verbose
    --allow-root            Allows running commands as root



### Grunt: The JavaScript Task Runner (v0.4.1)


Usage:

	$ grunt [options] [task]

Options:

	-h, --help 				Display this help text.                                        
	-d, --debug			  	Enable debugging mode for tasks that support it.               
	-f, --force  			A way to force your way past warnings.  
	-v, --verbose 			Verbose mode. A lot more information output.                   
	-V, --version 			Print the grunt version. Combine with --verbose for more info. 
	--base  				Specify an alternate base path.           
	--no-color  			Disable colored output.                                        
	--gruntfile  			Specify an alternate Gruntfile.    
	--stack  				Print a stack trace when exiting with a warning or fatal error.
	--tasks  				Additional directory paths to scan for task and "extra" files.                                           
	--npm  					Npm-installed grunt plugins to scan for task and "extra" files.                                
	--no-write  			Disable writing files (dry run).                               
	--completion  			Output shell auto-completion rules.   

Available tasks:

	copy  					Copy files. *                                                  
	concat  				Concatenate files. *                                           
	coffee  				Compile CoffeeScript files into JavaScript *                   
	uglify  				Minify files with UglifyJS. *                                  
	compass  				Compile Sass to CSS using Compass *                            
	jshint  				Validate files with JSHint. *                                  
	cssmin  				Minify CSS files *                                             
	connect  				Start a connect web server. *                                  
	clean  					Clean files and folders. *                                     
	htmlmin  				Minify HTML *                                                  
	imagemin  				Minify PNG and JPEG images *                                   
	watch  					Run predefined tasks whenever watched files change.            
	usemin  				Replaces references to non-minified scripts / stylesheets *    
	useminPrepare  			Using HTML markup as the primary source of information *       
	svgmin  				Minify SVG *                                                   
	rev  					Prefix static asset file names with a content hash *           
	concurrent  			Run grunt tasks concurrently *                                 
	cdnify  				replace scripts with refs to the Google CDN *                  
	ngmin  					Annotate AngularJS scripts for minification *                  
	server  				Custom task.                                                   
	autoprefixer  			Parse CSS and add vendor prefixes to CSS rules using values 
							from the Can I Use website. *                                  
	test  					Alias for "clean:server", "concurrent:test", "autoprefixer",   
		 					"connect:test", "karma" tasks.                                 
	build  					Alias for "clean:dist", "useminPrepare", "concurrent:dist",    
	 						"autoprefixer", "concat", "copy:dist", "cdnify", "ngmin",      
			 				"cssmin", "uglify", "rev", "usemin" tasks.                     
	default  				Alias for "jshint", "test", "build" tasks.            



### Git

Usage: 

	git <command> [<args>] [<options>]

Commands:

	add        				Add file contents to the index
	bisect           	 	Find by binary search the change that introduced a bug
	branch     				List, create, or delete branches
	checkout   				Checkout a branch or paths to the working tree
	clone      				Clone a repository into a new directory
	commit     				Record changes to the repository
	diff       				Show changes between commits, commit and working tree, etc
	fetch      				Download objects and refs from another repository
	grep       				Print lines matching a pattern
	init       				Create an empty Git repository or reinitialize an existing one
	log        				Show commit logs
	merge      				Join two or more development histories together
	mv         				Move or rename a file, a directory, or a symlink
	pull       				Fetch from and merge with another repository or a local branch
	push       				Update remote refs along with associated objects
	rebase     				Forward-port local commits to the updated upstream head
	reset      				Reset current HEAD to the specified state
	rm         				Remove files from the working tree and from the index
	show       				Show various types of objects
	status     				Show the working tree status
	tag        				Create, list, delete or verify a tag object signed with GPG







# Required Tools
In order to take full advantage of the Yeoman Workflow you need to setup your development environment.




### Installation
The following tools are required for this books projects and code examples.



#### 1. Git
To install `git` you can download the installer from [Github.com](http://github.com/) for [Mac](http://git-scm.com/download/mac) or [Windows](https://msysgit.googlecode.com/files/Git-1.8.4-preview20130916.exe).

**Execute command:**

	$ git --version
	
> As of this writing the version is `1.8.3.4`





#### 2. NodeJS
To install `node` and `npm` you can download the installer from [NodeJS.org](http://nodejs.org/) for [Mac](http://nodejs.org/dist/v0.10.21/node-v0.10.21.pkg) or [Windows](http://nodejs.org/dist/v0.10.21/node-v0.10.21-x86.msi). 

**Execute command:** 

	$ node -v
	
> As of this writing the version is `0.10.22`

**For Ubuntu:**

	$ sudo apt-get install python-software-properties python g++ make
	$ sudo add-apt-repository ppa:chris-lea/node.js
	$ sudo apt-get update 
	$ sudo apt-get install nodejs

> More information is available at https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager



#### 3. Yo
To install `yo` use `npm`, the Node.js package manager.

**Execute command:**

	$ sudo npm install yo -g

> This also installs grunt-li and bower for Node.js versions >= 0.0.8



#### 4. Grunt CLI
To install `grunt` you can use `npm`, the Node.js package manager.

**Execute command:** 

	$ sudo npm install grunt-cli -g

> As of this writing the version is `0.1.9`
> Grunt 0.4.x requires stable Node.js versions >= 0.8.0.

Doing this puts the `grunt` command in your systems path allowing you to use it command everywhere.





#### 5. Bower
To install `bower` you can use `npm`, the Node.js package manager.


**Execute command:**

	$ sudo npm install bower -g
	
> As of this writing the version is `1.2.7`

 
 
 


---



Want to see code coverage? Well there is a module for that, to install the karma coverage plugin execute the following:

	$ npm install karama-coverage
	
Then you will need to add the configuration to your karma.conf.js file.

Add the following lines somewhere in the config.set object: